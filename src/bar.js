// Generated by CoffeeScript 1.6.3
(function() {
  var smartCeil,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  smartCeil = function(v) {
    var divisor, log, n;
    log = Math.log10(v);
    divisor = Math.pow(10, Math.ceil(log) - 1);
    n = v / divisor;
    while (n > 10) {
      divisor *= 2;
      n = v / divisor;
    }
    return Math.ceil(v / divisor) * divisor;
  };

  this.StackedBarChart = (function(_super) {
    __extends(StackedBarChart, _super);

    function StackedBarChart(container, data, opts) {
      var box, color, column, columnWidth, group, groups, height, opacity, self, sum, totalString, value, values, xGroup, xGroups, xUniq, xValues, y, yMax, _fn, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
      _.defaults(opts, {
        xField: 'x',
        yField: 'y',
        groupField: 'group',
        opacityField: null,
        xLabel: 'x',
        yLabel: 'y',
        yPrefix: '',
        title: 'Title',
        title_class: null,
        useDataCanvas: false,
        interact: false,
        onClick: function(value) {
          return {};
        }
      });
      StackedBarChart.__super__.constructor.call(this, container, opts);
      this.container.addClass('stacked-bar');
      if (this.opts.yPrefix === '$') {
        this.yFormatter = new DollarFormatter();
      }
      xValues = _.pluck(data, opts.xField);
      xUniq = _.uniq(xValues);
      if (!opts.xOrder) {
        opts.xOrder = xUniq.sort();
      }
      columnWidth = 100 / opts.xOrder.length;
      groups = _.uniq(_.pluck(data, opts.groupField));
      if (!opts.groupOrder) {
        opts.groupOrder = groups.sort();
      }
      this.xAxis.setFixedArray(opts.xOrder);
      yMax = 0;
      xGroups = {};
      _ref = opts.xOrder;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        xGroup = _ref[_i];
        values = _.filter(data, function(v) {
          return v[opts.xField] === xGroup;
        });
        sum = _.reduce(values, function(memo, v) {
          return memo + v[opts.yField];
        }, 0);
        yMax = Math.max(yMax, sum);
        xGroups[xGroup] = {
          values: values,
          total: sum
        };
      }
      this.yResize(0, yMax);
      this.yRound();
      yMax = this.yAxis.max;
      self = this;
      _ref1 = opts.xOrder;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        xGroup = _ref1[_j];
        column = $("<div class='column' style='width: " + columnWidth + "%'></div>").appendTo(this.dataCanvasContainer);
        y = 0;
        _ref2 = opts.groupOrder;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          group = _ref2[_k];
          color = opts.groupColors[group];
          values = _.filter(xGroups[xGroup].values, function(v) {
            return v[opts.groupField] === group;
          });
          _fn = function(value) {
            return box.click(function() {
              self.dataCanvasContainer.find('a.box').removeClass('active');
              $(this).addClass('active');
              return opts.onClick(value);
            });
          };
          for (_l = 0, _len3 = values.length; _l < _len3; _l++) {
            value = values[_l];
            height = value[opts.yField] / yMax * 100;
            opacity = 1;
            if (opts.opacityField) {
              opacity = value[opts.opacityField];
            }
            box = $("<a class='box' style='height: " + height + "%; bottom: " + y + "%; background-color: " + color + "; opacity: " + opacity + "'></a>").appendTo(column);
            _fn(value);
            y += height;
          }
        }
        totalString = this.yFormatter.format(this.yAxis.span, xGroups[xGroup].total);
        $("<div class='total' style='bottom: " + y + "%'>" + opts.yPrefix + totalString + "</div>").appendTo(column);
      }
      this.render();
    }

    return StackedBarChart;

  })(Chart);

  window.tinyplot.StackedBarChart = StackedBarChart;

}).call(this);

/*
//@ sourceMappingURL=bar.map
*/
