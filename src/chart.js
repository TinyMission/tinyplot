// Generated by CoffeeScript 1.6.3
(function() {
  var RenderContext, initCanvas,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RenderContext = (function() {
    function RenderContext(canvas, width, height, xRange, yRange) {
      this.canvas = canvas;
      this.width = width;
      this.height = height;
      this.xRange = xRange;
      this.yRange = yRange;
      this.lineTo = __bind(this.lineTo, this);
      this.moveTo = __bind(this.moveTo, this);
      this.plotToCanvas = __bind(this.plotToCanvas, this);
      ({});
    }

    RenderContext.prototype.clear = function() {
      return this.canvas.clearRect(0, 0, this.width, this.height);
    };

    RenderContext.prototype.setStroke = function(style, width) {
      this.canvas.strokeStyle = style;
      return this.canvas.lineWidth = width;
    };

    RenderContext.prototype.stroke = function(cb) {
      this.canvas.beginPath();
      cb();
      return this.canvas.stroke();
    };

    RenderContext.prototype.plotToCanvas = function(p) {
      p.x = (p.x - this.xRange.min) / this.xRange.span * this.width;
      return p.y = (1 - (p.y - this.yRange.min) / this.yRange.span) * this.height;
    };

    RenderContext.prototype.moveTo = function(p) {
      this.plotToCanvas(p);
      return this.canvas.moveTo(p.x, p.y);
    };

    RenderContext.prototype.lineTo = function(p) {
      this.plotToCanvas(p);
      return this.canvas.lineTo(p.x, p.y);
    };

    return RenderContext;

  })();

  initCanvas = function(container) {
    var canvasElem;
    canvasElem = container.find('canvas')[0];
    canvasElem.width = container.width();
    canvasElem.height = container.height();
    return canvasElem.getContext('2d');
  };

  this.Chart = (function() {
    function Chart(container, opts) {
      var _this = this;
      this.container = $(container);
      this.container.addClass('tinyplot-chart');
      this.opts = opts;
      _.defaults(opts, {
        title: 'Chart Title',
        xZoom: 'none',
        yZoom: 'none'
      });
      this.xZoomType = opts.xZoom;
      this.yZoomType = opts.yZoom;
      this.titleArea = $('<div class="title-area"></div>').appendTo(this.container);
      $("<div class='title text'>" + opts.title + "</div>").appendTo(this.titleArea);
      this.xAxisCanvasContainer = $('<div class="x-axis"><canvas/></div>').appendTo(this.container);
      this.xAxisCanvas = initCanvas(this.xAxisCanvasContainer);
      this.xAxis = new XAxis(0, 1);
      this.yAxisCanvasContainer = $('<div class="y-axis"><canvas/></div>').appendTo(this.container);
      this.yAxisCanvas = initCanvas(this.yAxisCanvasContainer);
      this.yAxis = new YAxis(0, 1);
      this.dataCanvasContainer = $('<div class="data"><canvas/></div>').appendTo(this.container);
      this.dataCanvas = initCanvas(this.dataCanvasContainer);
      interact(this.dataCanvasContainer[0]).draggable({
        inertia: true,
        onmove: function(evt) {
          return _this.pan(evt.dx, evt.dy);
        }
      });
      this.makeContext();
      this.container.on('mousewheel', function(evt) {
        _this.zoom(1 + evt.deltaY / 1000);
        return evt.preventDefault();
      });
    }

    Chart.prototype.xResize = function(min, max) {
      this.xAxis.resize(min, max);
      console.log("xAxis: " + (this.xAxis.toString()));
      return this.xAxis.makeDirty();
    };

    Chart.prototype.xRound = function() {
      this.xAxis.round();
      return console.log("xAxis: " + (this.xAxis.toString()));
    };

    Chart.prototype.xClamp = function() {
      return this.xAxis.clamp();
    };

    Chart.prototype.yResize = function(min, max) {
      this.yAxis.resize(min, max);
      console.log("yAxis: " + (this.yAxis.toString()));
      return this.yAxis.makeDirty();
    };

    Chart.prototype.yRound = function() {
      this.yAxis.round();
      return console.log("yAxis: " + (this.yAxis.toString()));
    };

    Chart.prototype.yClamp = function() {
      return this.yAxis.clamp();
    };

    Chart.prototype.makeContext = function() {
      return this.context = new RenderContext(this.dataCanvas, this.dataCanvasContainer.width(), this.dataCanvasContainer.height(), this.xAxis, this.yAxis);
    };

    Chart.prototype.zoom = function(delta) {
      var hasZoomed;
      hasZoomed = false;
      if (this.xZoomType === 'user') {
        this.xAxis.zoom(delta);
        hasZoomed = true;
      }
      if (this.yZoomType === 'user') {
        this.yAxis.zoom(delta);
        hasZoomed = true;
      }
      if (hasZoomed) {
        return this.render();
      }
    };

    Chart.prototype.pan = function(dx, dy) {
      var hasPanned;
      hasPanned = false;
      if (this.xZoomType === 'user') {
        this.xAxis.pan(dx / this.context.width * this.xAxis.span);
        hasPanned = true;
      }
      if (this.yZoomType === 'user') {
        this.yAxis.pan(dy / this.context.height * this.yAxis.span);
        hasPanned = true;
      }
      if (hasPanned) {
        return this.render();
      }
    };

    Chart.prototype.renderData = function(context) {
      return {};
    };

    Chart.prototype.render = function() {
      var startTime, stopTime;
      startTime = new Date().getTime();
      if (this.xAxis.dirty) {
        this.xAxis.render(this.xAxisCanvas, this.xAxisCanvasContainer.width(), this.xAxisCanvasContainer.height());
      }
      if (this.yAxis.dirty) {
        this.yAxis.render(this.yAxisCanvas, this.yAxisCanvasContainer.width(), this.yAxisCanvasContainer.height());
      }
      this.context.clear();
      this.renderData(this.context);
      stopTime = new Date().getTime();
      return console.log("rendered chart in " + (stopTime - startTime) + "ms");
    };

    return Chart;

  })();

}).call(this);

/*
//@ sourceMappingURL=chart.map
*/
